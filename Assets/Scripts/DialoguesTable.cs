// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class DialoguesTable : MonoBehaviour
{
	public TextAsset file;
	public List<Row> rowList = new List<Row>();
	public bool isLoaded = false;

	public void Awake () {
		rowList = new List<Row>();
		Load(file);
		Debug.Log("CSV file loaded.");
	}

	[System.Serializable]
	public class Row
	{
		public string sceneID;
		public string character;
		public string character_image;
		public string dialogue;
		public string dialogue_audio;
		public string main_skill;
		public string answer1;
		public string answer2;
		public string answer3;
		public string answer1_audio;
		public string answer2_audio;
		public string answer3_audio;
		public string score1;
		public string score2;
		public string score3;
		public string next_scene1;
		public string next_scene2;
		public string next_scene3;
		public string background;
		public string background_music;

	}

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.sceneID = grid[i][0];
			row.character = grid[i][1];
			row.character_image = grid[i][2];
			row.dialogue = grid[i][3];
			row.dialogue_audio = grid[i][4];
			row.main_skill = grid[i][5];
			row.answer1 = grid[i][6];
			row.answer2 = grid[i][7];
			row.answer3 = grid[i][8];
			row.answer1_audio = grid[i][9];
			row.answer2_audio = grid[i][10];
			row.answer3_audio = grid[i][11];
			row.score1 = grid[i][12];
			row.score2 = grid[i][13];
			row.score3 = grid[i][14];
			row.next_scene1 = grid[i][15];
			row.next_scene2 = grid[i][16];
			row.next_scene3 = grid[i][17];
			row.background = grid[i][18];
			row.background_music = grid[i][19];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_sceneID(string find)
	{
		return rowList.Find(x => x.sceneID == find);
	}
	public List<Row> FindAll_sceneID(string find)
	{
		return rowList.FindAll(x => x.sceneID == find);
	}
	public Row Find_character(string find)
	{
		return rowList.Find(x => x.character == find);
	}
	public List<Row> FindAll_character(string find)
	{
		return rowList.FindAll(x => x.character == find);
	}
	public Row Find_character_image(string find)
	{
		return rowList.Find(x => x.character_image == find);
	}
	public List<Row> FindAll_character_image(string find)
	{
		return rowList.FindAll(x => x.character_image == find);
	}
	public Row Find_dialogue(string find)
	{
		return rowList.Find(x => x.dialogue == find);
	}
	public List<Row> FindAll_dialogue(string find)
	{
		return rowList.FindAll(x => x.dialogue == find);
	}
	public Row Find_dialogue_audio(string find)
	{
		return rowList.Find(x => x.dialogue_audio == find);
	}
	public List<Row> FindAll_dialogue_audio(string find)
	{
		return rowList.FindAll(x => x.dialogue_audio == find);
	}
	public Row Find_main_skill(string find)
	{
		return rowList.Find(x => x.main_skill == find);
	}
	public List<Row> FindAll_main_skill(string find)
	{
		return rowList.FindAll(x => x.main_skill == find);
	}
	public Row Find_answer1(string find)
	{
		return rowList.Find(x => x.answer1 == find);
	}
	public List<Row> FindAll_answer1(string find)
	{
		return rowList.FindAll(x => x.answer1 == find);
	}
	public Row Find_answer2(string find)
	{
		return rowList.Find(x => x.answer2 == find);
	}
	public List<Row> FindAll_answer2(string find)
	{
		return rowList.FindAll(x => x.answer2 == find);
	}
	public Row Find_answer3(string find)
	{
		return rowList.Find(x => x.answer3 == find);
	}
	public List<Row> FindAll_answer3(string find)
	{
		return rowList.FindAll(x => x.answer3 == find);
	}
	public Row Find_answer1_audio(string find)
	{
		return rowList.Find(x => x.answer1_audio == find);
	}
	public List<Row> FindAll_answer1_audio(string find)
	{
		return rowList.FindAll(x => x.answer1_audio == find);
	}
	public Row Find_answer2_audio(string find)
	{
		return rowList.Find(x => x.answer2_audio == find);
	}
	public List<Row> FindAll_answer2_audio(string find)
	{
		return rowList.FindAll(x => x.answer2_audio == find);
	}
	public Row Find_answer3_audio(string find)
	{
		return rowList.Find(x => x.answer3_audio == find);
	}
	public List<Row> FindAll_answer3_audio(string find)
	{
		return rowList.FindAll(x => x.answer3_audio == find);
	}
	public Row Find_score1(string find)
	{
		return rowList.Find(x => x.score1 == find);
	}
	public List<Row> FindAll_score1(string find)
	{
		return rowList.FindAll(x => x.score1 == find);
	}
	public Row Find_score2(string find)
	{
		return rowList.Find(x => x.score2 == find);
	}
	public List<Row> FindAll_score2(string find)
	{
		return rowList.FindAll(x => x.score2 == find);
	}
	public Row Find_score3(string find)
	{
		return rowList.Find(x => x.score3 == find);
	}
	public List<Row> FindAll_score3(string find)
	{
		return rowList.FindAll(x => x.score3 == find);
	}
	public Row Find_next_scene1(string find)
	{
		return rowList.Find(x => x.next_scene1 == find);
	}
	public List<Row> FindAll_next_scene1(string find)
	{
		return rowList.FindAll(x => x.next_scene1 == find);
	}
	public Row Find_next_scene2(string find)
	{
		return rowList.Find(x => x.next_scene2 == find);
	}
	public List<Row> FindAll_next_scene2(string find)
	{
		return rowList.FindAll(x => x.next_scene2 == find);
	}
	public Row Find_next_scene3(string find)
	{
		return rowList.Find(x => x.next_scene3 == find);
	}
	public List<Row> FindAll_next_scene3(string find)
	{
		return rowList.FindAll(x => x.next_scene3 == find);
	}
	public Row Find_background(string find)
	{
		return rowList.Find(x => x.background == find);
	}
	public List<Row> FindAll_background(string find)
	{
		return rowList.FindAll(x => x.background == find);
	}
	public Row Find_background_music(string find)
	{
		return rowList.Find(x => x.background_music == find);
	}
	public List<Row> FindAll_background_music(string find)
	{
		return rowList.FindAll(x => x.background_music == find);
	}
	
}